{"version":3,"sources":["covid19-information-and-updates-serbia-banner.jpg","components/Header.js","components/Home.js","components/BarChart.js","components/LineChart.js","components/CircleChart.js","components/PostWrapper.js","components/PostContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Home","style","width","maxWidth","height","src","require","default","SpinnerBox","styled","div","BarChart","useState","confirmedData","setConfirmedData","loading","setLoading","error","setError","useEffect","fetchEvents","a","axios","get","res","makeData","data","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","deaths","Deaths","recovered","Recovered","findItem","find","push","labels","map","e","i","datasets","label","backgroundColor","fill","Spinner","animation","options","legend","display","position","LineChart","quarantinedData","setQuarantinedData","borderColor","CircleChart","comparedData","setComparedData","last","length","maintainAspectRatio","PostWrapper","Nav","variant","Item","Link","as","to","eventKey","exact","path","PostContainer","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oJAAA,OAAe,cAA0B,2E,8GCS1BA,MANf,WACI,OACI,oBAAIC,UAAU,uBAAd,SAAqC,4C,wCCW9BC,I,MAAAA,EAbf,WAMI,OACI,qBAAKD,UAAU,OAAf,SACI,qBAAKE,MAPC,CACVC,MAAO,UACPC,SAAU,OACVC,OAAQ,QAIeC,IAAKC,EAAQ,KAAwDC,a,kECJ9FC,EAAaC,IAAOC,IAAV,gJAyGDC,EAjGE,WACb,MAA0CC,qBAA1C,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAwEA,OAvEAC,qBAAU,WACN,IAAMC,EAAW,uCAAG,4BAAAC,EAAA,6DAChBL,GAAW,GACXE,GAAS,GAFO,kBAIMI,IAAMC,IAAI,sDAJhB,OAINC,EAJM,OAKZC,EAASD,EAAIE,MALD,gDAOZR,EAAS,EAAD,IAPI,QAShBF,GAAW,GATK,yDAAH,qDAWXS,EAAW,SAACE,GACd,IAAMC,EAAMD,EAAME,QAAO,SAACC,EAAKC,GAC3B,IAAMC,EAAc,IAAIC,KAAKF,EAAIE,MAC3BC,EAAOF,EAAYG,cACnBC,EAAQJ,EAAYK,WACpBC,EAAON,EAAYO,UAEnBC,EAAYT,EAAIU,UAChBC,EAASX,EAAIY,OACbC,EAASb,EAAIc,OACbC,EAAYf,EAAIgB,UAEhBC,EAAWlB,EAAImB,MAAK,SAAC5B,GACvB,OAAOA,EAAEa,OAASA,GAAQb,EAAEe,QAAUA,KAuB1C,OApBKY,GACDlB,EAAIoB,KAAK,CACLhB,KAAMA,EACNE,MAAOA,EACPE,KAAMA,EACNE,UAAWA,EACXE,OAAQA,EACRE,OAAQA,EACRE,UAAWA,IAGfE,GAAYA,EAASV,KAAOA,IAC5BU,EAASN,OAASA,EAClBM,EAASJ,OAASA,EAClBI,EAASV,KAAOA,EAChBU,EAASd,KAAOA,EAChBc,EAASZ,MAAQA,EACjBY,EAASF,UAAYA,EACrBE,EAASR,UAAYA,GAElBV,IACR,IAEGqB,EAASvB,EAAIwB,KAAI,SAACC,EAAGC,GACvB,MAAM,GAAN,OAAUD,EAAEnB,KAAZ,mBAAsBmB,EAAEjB,MAAQ,EAAhC,aAEJtB,EAAiB,CACbqC,OAAQA,EACRI,SAAU,CACN,CACIC,MAAO,+CACPC,gBAAiB,SACjBC,MAAM,EACNhC,KAAME,EAAIwB,KAAI,SAACC,EAAGC,GACd,OAAOD,EAAEb,kBAO7BpB,MACD,IACCH,EACA,8GAEAF,EACA,cAACP,EAAD,UACI,cAACmD,EAAA,EAAD,CAAS5D,UAAU,SAAS6D,UAAU,aAK1C,kCACI,qBAAK7D,UAAU,WAAf,SACI,qBAAKA,UAAU,YAAf,SACI,cAAC,IAAD,CAAK2B,KAAMb,EAAegD,QAEtB,CAAEC,OAAQ,CAAEC,SAAS,EAAMC,SAAU,oBCnGvDxD,EAAaC,IAAOC,IAAV,gJAyGDuD,EAlGG,WACd,MAA8CrD,qBAA9C,mBAAOsD,EAAP,KAAwBC,EAAxB,KACA,EAA8BvD,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAwEA,OAvEAC,qBAAU,WACN,IAAMC,EAAW,uCAAG,4BAAAC,EAAA,6DAChBL,GAAW,GACXE,GAAS,GAFO,kBAIMI,IAAMC,IAAI,sDAJhB,OAINC,EAJM,OAKZC,EAASD,EAAIE,MALD,gDAOZR,EAAS,EAAD,IAPI,QAShBF,GAAW,GATK,yDAAH,qDAWXS,EAAW,SAACE,GACd,IAAMC,EAAMD,EAAME,QAAO,SAACC,EAAKC,GAC3B,IAAMC,EAAc,IAAIC,KAAKF,EAAIE,MAC3BC,EAAOF,EAAYG,cACnBC,EAAQJ,EAAYK,WACpBC,EAAON,EAAYO,UAEnBC,EAAYT,EAAIU,UAChBC,EAASX,EAAIY,OACbC,EAASb,EAAIc,OACbC,EAAYf,EAAIgB,UAEhBC,EAAWlB,EAAImB,MAAK,SAAC5B,GACvB,OAAOA,EAAEa,OAASA,GAAQb,EAAEe,QAAUA,KAuB1C,OApBKY,GACDlB,EAAIoB,KAAK,CACLhB,KAAMA,EACNE,MAAOA,EACPE,KAAMA,EACNE,UAAWA,EACXE,OAAQA,EACRE,OAAQA,EACRE,UAAWA,IAGfE,GAAYA,EAASV,KAAOA,IAC5BU,EAASN,OAASA,EAClBM,EAASJ,OAASA,EAClBI,EAASV,KAAOA,EAChBU,EAASd,KAAOA,EAChBc,EAASZ,MAAQA,EACjBY,EAASF,UAAYA,EACrBE,EAASR,UAAYA,GAElBV,IACR,IAEGqB,EAASvB,EAAIwB,KAAI,SAACC,EAAGC,GACvB,MAAM,GAAN,OAAUD,EAAEnB,KAAZ,mBAAsBmB,EAAEjB,MAAQ,EAAhC,aAEJ+B,EAAmB,CACfhB,OAAQA,EACRI,SAAU,CACN,CACIC,MAAO,+CACPY,YAAa,UACbV,MAAM,EACNhC,KAAME,EAAIwB,KAAI,SAACC,EAAGC,GACd,OAAOD,EAAEX,eAO7BtB,MACD,IACCH,EACA,8GAEAF,EACA,cAAC,EAAD,UACI,cAAC4C,EAAA,EAAD,CAAS5D,UAAU,SAAS6D,UAAU,aAI1C,kCACI,qBAAK7D,UAAU,WAAf,SACI,qBAAKA,UAAU,QAAf,SACI,cAAC,IAAD,CAAM2B,KAAMwC,EAAiBL,QAEzB,CAAEC,OAAQ,CAAEC,SAAS,EAAMC,SAAU,oBC/FvDxD,EAAaC,IAAOC,IAAV,gJAyGD2D,EAjGK,WAChB,MAAwCzD,qBAAxC,mBAAO0D,EAAP,KAAqBC,EAArB,KACA,EAA8B3D,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAuEA,OArEAC,qBAAU,WACN,IAAMC,EAAW,uCAAG,4BAAAC,EAAA,6DAChBL,GAAW,GACXE,GAAS,GAFO,kBAIMI,IAAMC,IAAI,sDAJhB,OAINC,EAJM,OAKZC,EAASD,EAAIE,MALD,gDAOZR,EAAS,EAAD,IAPI,QAShBF,GAAW,GATK,yDAAH,qDAWXS,EAAW,SAACE,GACd,IAAMC,EAAMD,EAAME,QAAO,SAACC,EAAKC,GAC3B,IAAMC,EAAc,IAAIC,KAAKF,EAAIE,MAC3BC,EAAOF,EAAYG,cACnBC,EAAQJ,EAAYK,WACpBC,EAAON,EAAYO,UAEnBC,EAAYT,EAAIU,UAChBC,EAASX,EAAIY,OACbC,EAASb,EAAIc,OACbC,EAAYf,EAAIgB,UAEhBC,EAAWlB,EAAImB,MAAK,SAAC5B,GACvB,OAAOA,EAAEa,OAASA,GAAQb,EAAEe,QAAUA,KAuB1C,OApBKY,GACDlB,EAAIoB,KAAK,CACLhB,KAAMA,EACNE,MAAOA,EACPE,KAAMA,EACNE,UAAWA,EACXE,OAAQA,EACRE,OAAQA,EACRE,UAAWA,IAGfE,GAAYA,EAASV,KAAOA,IAC5BU,EAASN,OAASA,EAClBM,EAASJ,OAASA,EAClBI,EAASV,KAAOA,EAChBU,EAASd,KAAOA,EAChBc,EAASZ,MAAQA,EACjBY,EAASF,UAAYA,EACrBE,EAASR,UAAYA,GAElBV,IACR,IAEG0C,EAAO5C,EAAIA,EAAI6C,OAAS,GAC9BF,EAAgB,CACZpB,OAAQ,CAAC,qBAAO,2BAAQ,gBACxBI,SAAU,CACN,CACIC,MAAO,wDACPC,gBAAiB,CAAC,UAAW,UAAW,WACxCW,YAAa,CAAC,UAAW,UAAW,WACpCV,MAAM,EACNhC,KAAM,CAAC8C,EAAKhC,UAAWgC,EAAK1B,UAAW0B,EAAK5B,aAM5DxB,MACD,IAECH,EACA,8GAEAF,EACA,cAAC,EAAD,UACI,cAAC4C,EAAA,EAAD,CAAS5D,UAAU,SAAS6D,UAAU,aAI1C,kCACI,qBAAK7D,UAAU,WAAf,SACI,qBAAKA,UAAU,QAAf,SACI,cAAC,IAAD,CAAUK,OAAO,QAAQsB,KAAM4C,EAAcT,SACV,6CAAD,QAAiB,IAAI5B,MAAOI,SAAW,EAAvC,KAE9B,CAAEqC,qBAAqB,aC/ChCC,MAjDf,WACI,OACI,sBAAK5E,UAAU,mBAAf,UACI,eAAC6E,EAAA,EAAD,CAAKC,QAAQ,QAAb,UACI,cAACD,EAAA,EAAIE,KAAL,UACI,cAACF,EAAA,EAAIG,KAAL,CAAUC,GAAID,IAAMA,MAAI,EAACE,GAAG,gBAAgBC,SAAS,SAArD,oBAEJ,cAACN,EAAA,EAAIE,KAAL,UACI,cAACF,EAAA,EAAIG,KAAL,CAAUC,GAAID,IAAMA,MAAI,EAACE,GAAG,2BAA2BC,SAAS,SAAhE,4DAEJ,cAACN,EAAA,EAAIE,KAAL,UACI,cAACF,EAAA,EAAIG,KAAL,CAAUC,GAAID,IAAMA,MAAI,EAACE,GAAG,4BAA4BC,SAAS,SAAjE,4DAEJ,cAACN,EAAA,EAAIE,KAAL,UACI,cAACF,EAAA,EAAIG,KAAL,CAAUC,GAAID,IAAMA,MAAI,EAACE,GAAG,8BAA8BC,SAAS,SAAnE,4CAMR,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAAlB,SACI,8BACI,cAAC,EAAD,QAKR,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,2BAAlB,SACI,cAAC,EAAD,MAKJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,4BAAlB,SACI,8BACI,cAAC,EAAD,QAKR,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,8BAAlB,SACI,8BACI,cAAC,EAAD,YCtCLC,I,EAAAA,EATf,WACI,OACI,8BACI,cAAC,EAAD,OCFNC,EAAcC,YAAH,oEAiBFC,MAZf,WACE,OACE,qCACE,cAACF,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCFSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.54f0a8a5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/covid19-information-and-updates-serbia-banner.2a8a368d.jpg\";","import React from 'react'\r\nimport './Header.css'\r\n\r\nfunction Header() {\r\n    return (\r\n        <h1 className=\"head-title pt-3 pb-3\"><b>COVID-19</b></h1>\r\n    );\r\n}\r\n\r\nexport default Header;","/* eslint-disable */\r\nimport React from 'react'\r\n\r\nfunction Home() {\r\n    const style = {\r\n        width: \"inherit\",\r\n        maxWidth: \"100%\",\r\n        height: \"auto\",\r\n    }\r\n    return (\r\n        <div className=\"mt-3\">\r\n            <img style={style} src={require(\"../covid19-information-and-updates-serbia-banner.jpg\").default}></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport './PostWrapper.css'\r\nimport { Bar } from 'react-chartjs-2'\r\nimport { Spinner } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\n\r\nconst SpinnerBox = styled.div`\r\n    width: 800px;\r\n    height: 400px;\r\n    display: flex;\r\n    flex-direction : row;\r\n    justify-content: center;\r\n`\r\n\r\nconst BarChart = () => {\r\n    const [confirmedData, setConfirmedData] = useState();\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    useEffect(() => {\r\n        const fetchEvents = async () => {\r\n            setLoading(true);\r\n            setError(false);\r\n            try {\r\n                const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\");\r\n                makeData(res.data);\r\n            } catch (e) {\r\n                setError(e);\r\n            }\r\n            setLoading(false);\r\n        }\r\n        const makeData = (items) => {\r\n            const arr = items.reduce((acc, cur) => {\r\n                const currentDate = new Date(cur.Date);\r\n                const year = currentDate.getFullYear();\r\n                const month = currentDate.getMonth();\r\n                const date = currentDate.getDate();\r\n\r\n                const confirmed = cur.Confirmed;\r\n                const active = cur.Active;\r\n                const deaths = cur.Deaths;\r\n                const recovered = cur.Recovered;\r\n\r\n                const findItem = acc.find((a) => {\r\n                    return a.year === year && a.month === month\r\n                });\r\n\r\n                if (!findItem) {\r\n                    acc.push({\r\n                        year: year,\r\n                        month: month,\r\n                        date: date,\r\n                        confirmed: confirmed,\r\n                        active: active,\r\n                        deaths: deaths,\r\n                        recovered: recovered\r\n                    })\r\n                }\r\n                if (findItem && findItem.date < date) {\r\n                    findItem.active = active;\r\n                    findItem.deaths = deaths;\r\n                    findItem.date = date;\r\n                    findItem.year = year;\r\n                    findItem.month = month;\r\n                    findItem.recovered = recovered;;\r\n                    findItem.confirmed = confirmed;\r\n                }\r\n                return acc;\r\n            }, [])\r\n\r\n            const labels = arr.map((e, i) => {\r\n                return `${e.year}년  ${e.month + 1}월`\r\n            })\r\n            setConfirmedData({\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"국내 누적 확진자\",\r\n                        backgroundColor: \"salmon\",\r\n                        fill: true,\r\n                        data: arr.map((e, i) => {\r\n                            return e.confirmed;\r\n                        })\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n\r\n        fetchEvents();\r\n    }, [])\r\n    if (error) return (\r\n        <div>정보를 불러오지 못했습니다.</div>\r\n    )\r\n    if (loading) return (\r\n        <SpinnerBox>\r\n            <Spinner className=\"m-auto\" animation=\"border\" />\r\n        </SpinnerBox>\r\n    )\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"contents\">\r\n                <div className=\"chart bar\">\r\n                    <Bar data={confirmedData} options={\r\n                        { title: { display: true, text: \"누적 환진자 현황\", fontSize: 16 } },\r\n                        { legend: { display: true, position: \"bottom\" } }\r\n                    } />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nexport default BarChart;","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport './PostWrapper.css'\r\nimport { Line } from 'react-chartjs-2'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from 'react-bootstrap'\r\nconst SpinnerBox = styled.div`\r\n    width: 800px;\r\n    height: 400px;\r\n    display: flex;\r\n    flex-direction : row;\r\n    justify-content: center;\r\n`\r\nconst LineChart = () => {\r\n    const [quarantinedData, setQuarantinedData] = useState();\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    useEffect(() => {\r\n        const fetchEvents = async () => {\r\n            setLoading(true);\r\n            setError(false);\r\n            try {\r\n                const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\");\r\n                makeData(res.data);\r\n            } catch (e) {\r\n                setError(e);\r\n            }\r\n            setLoading(false);\r\n        }\r\n        const makeData = (items) => {\r\n            const arr = items.reduce((acc, cur) => {\r\n                const currentDate = new Date(cur.Date);\r\n                const year = currentDate.getFullYear();\r\n                const month = currentDate.getMonth();\r\n                const date = currentDate.getDate();\r\n\r\n                const confirmed = cur.Confirmed;\r\n                const active = cur.Active;\r\n                const deaths = cur.Deaths;\r\n                const recovered = cur.Recovered;\r\n\r\n                const findItem = acc.find((a) => {\r\n                    return a.year === year && a.month === month\r\n                });\r\n\r\n                if (!findItem) {\r\n                    acc.push({\r\n                        year: year,\r\n                        month: month,\r\n                        date: date,\r\n                        confirmed: confirmed,\r\n                        active: active,\r\n                        deaths: deaths,\r\n                        recovered: recovered\r\n                    })\r\n                }\r\n                if (findItem && findItem.date < date) {\r\n                    findItem.active = active;\r\n                    findItem.deaths = deaths;\r\n                    findItem.date = date;\r\n                    findItem.year = year;\r\n                    findItem.month = month;\r\n                    findItem.recovered = recovered;;\r\n                    findItem.confirmed = confirmed;\r\n                }\r\n                return acc;\r\n            }, [])\r\n\r\n            const labels = arr.map((e, i) => {\r\n                return `${e.year}년  ${e.month + 1}월`\r\n            })\r\n            setQuarantinedData({\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"월별 격리자 현황\",\r\n                        borderColor: \"skyblue\",\r\n                        fill: true,\r\n                        data: arr.map((e, i) => {\r\n                            return e.active;\r\n                        })\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n\r\n        fetchEvents();\r\n    }, [])\r\n    if (error) return (\r\n        <div>정보를 불러오지 못했습니다.</div>\r\n    )\r\n    if (loading) return (\r\n        <SpinnerBox>\r\n            <Spinner className=\"m-auto\" animation=\"border\" />\r\n        </SpinnerBox>\r\n    )\r\n    return (\r\n        <section>\r\n            <div className=\"contents\">\r\n                <div className=\"chart\">\r\n                    <Line data={quarantinedData} options={\r\n                        { title: { display: true, text: \"월별 격리자 현황\", fontSize: 16 } },\r\n                        { legend: { display: true, position: \"bottom\" } }\r\n                    } />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nexport default LineChart;","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport './PostWrapper.css'\r\nimport { Doughnut } from 'react-chartjs-2'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nconst SpinnerBox = styled.div`\r\n    width: 800px;\r\n    height: 400px;\r\n    display: flex;\r\n    flex-direction : row;\r\n    justify-content: center;\r\n`\r\n\r\nconst CircleChart = () => {\r\n    const [comparedData, setComparedData] = useState();\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchEvents = async () => {\r\n            setLoading(true);\r\n            setError(false);\r\n            try {\r\n                const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\");\r\n                makeData(res.data);\r\n            } catch (e) {\r\n                setError(e);\r\n            }\r\n            setLoading(false);\r\n        }\r\n        const makeData = (items) => {\r\n            const arr = items.reduce((acc, cur) => {\r\n                const currentDate = new Date(cur.Date);\r\n                const year = currentDate.getFullYear();\r\n                const month = currentDate.getMonth();\r\n                const date = currentDate.getDate();\r\n\r\n                const confirmed = cur.Confirmed;\r\n                const active = cur.Active;\r\n                const deaths = cur.Deaths;\r\n                const recovered = cur.Recovered;\r\n\r\n                const findItem = acc.find((a) => {\r\n                    return a.year === year && a.month === month\r\n                });\r\n\r\n                if (!findItem) {\r\n                    acc.push({\r\n                        year: year,\r\n                        month: month,\r\n                        date: date,\r\n                        confirmed: confirmed,\r\n                        active: active,\r\n                        deaths: deaths,\r\n                        recovered: recovered\r\n                    })\r\n                }\r\n                if (findItem && findItem.date < date) {\r\n                    findItem.active = active;\r\n                    findItem.deaths = deaths;\r\n                    findItem.date = date;\r\n                    findItem.year = year;\r\n                    findItem.month = month;\r\n                    findItem.recovered = recovered;;\r\n                    findItem.confirmed = confirmed;\r\n                }\r\n                return acc;\r\n            }, [])\r\n\r\n            const last = arr[arr.length - 1];\r\n            setComparedData({\r\n                labels: [\"확진자\", \"격리해제\", \"사망\"],\r\n                datasets: [\r\n                    {\r\n                        label: \"확진, 해제, 사망 비율\",\r\n                        backgroundColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n                        borderColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n                        fill: true,\r\n                        data: [last.confirmed, last.recovered, last.deaths]\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n\r\n        fetchEvents();\r\n    }, [])\r\n\r\n    if (error) return (\r\n        <div>정보를 불러오지 못했습니다.</div>\r\n    )\r\n    if (loading) return (\r\n        <SpinnerBox>\r\n            <Spinner className=\"m-auto\" animation=\"border\" />\r\n        </SpinnerBox>\r\n    )\r\n    return (\r\n        <section>\r\n            <div className=\"contents\">\r\n                <div className=\"chart\">\r\n                    <Doughnut height=\"400px\" data={comparedData} options={\r\n                        { title: { display: true, text: `확진, 해제, 사망 (${new Date().getMonth + 1})`, fontSize: 16 } },\r\n                        { legend: { display: true, position: \"bottom\" } },\r\n                        { maintainAspectRatio: false }\r\n                    } />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CircleChart;","import './PostWrapper.css'\r\nimport { Nav } from 'react-bootstrap'\r\nimport { Link, Route } from 'react-router-dom'\r\nimport Home from './Home'\r\nimport BarChart from './BarChart'\r\nimport LineChart from './LineChart'\r\nimport CircleChart from './CircleChart'\r\n\r\nfunction PostWrapper() {\r\n    return (\r\n        <div className=\"PostWrapper mt-3\">\r\n            <Nav variant=\"pills\">\r\n                <Nav.Item>\r\n                    <Nav.Link as={Link} Link to=\"/React_corona\" eventKey=\"link-1\">Home</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link as={Link} Link to=\"/React_corona/corona_bar\" eventKey=\"link-2\">누적 확진자 현황</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link as={Link} Link to=\"/React_corona/corona_line\" eventKey=\"link-3\">월별 격리자 현황</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link as={Link} Link to=\"/React_corona/corona_circle\" eventKey=\"link-4\">종합 차트</Nav.Link>\r\n                </Nav.Item>\r\n            </Nav>\r\n\r\n\r\n            {/* 메인화면 */}\r\n            <Route exact path=\"/React_corona\">\r\n                <div>\r\n                    <Home></Home>\r\n                </div>\r\n            </Route>\r\n\r\n            {/* 바 차트 */}\r\n            <Route exact path=\"/React_corona/corona_bar\">\r\n                <BarChart />\r\n            </Route>\r\n\r\n\r\n            {/* 라인 차트 */}\r\n            <Route exact path=\"/React_corona/corona_line\">\r\n                <div>\r\n                    <LineChart />\r\n                </div>\r\n            </Route>\r\n\r\n            {/* 원 차트 */}\r\n            <Route exact path=\"/React_corona/corona_circle\">\r\n                <div>\r\n                    <CircleChart />\r\n                </div>\r\n            </Route>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostWrapper;","import React from 'react'\r\nimport PostWrapper from './PostWrapper';\r\n\r\nfunction PostContainer() {\r\n    return(\r\n        <div>\r\n            <PostWrapper/>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default PostContainer;","import React from 'react'\nimport Header from './components/Header'\nimport { createGlobalStyle } from 'styled-components';\nimport PostContainer from './components/PostContainer'\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background:#e9ecef;\n  }\n`;\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <Header />\n      <PostContainer />\n    </>\n\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}